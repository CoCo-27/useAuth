function t(){return(t=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t}).apply(this,arguments)}class e{constructor(e){this.dispatch=e.dispatch,this.customPropertyNamespace=e.customPropertyNamespace,import("auth0-js").then(({WebAuth:i})=>{this.auth0=new i(t({},e))})}static addDefaultParams(e,i){return t({redirectUri:i+"/auth0_callback",audience:`https://${e.domain}/api/v2/`,responseType:"token id_token",scope:"openid profile email"},e)}authorize(){var t;null==(t=this.auth0)||t.authorize()}signup(){var t;null==(t=this.auth0)||t.authorize({mode:"signUp",screen_hint:"signup"})}logout(t){var e;null==(e=this.auth0)||e.logout({returnTo:t})}userId(t){return t.sub}userRoles(t){const e=t[(this.customPropertyNamespace+"/user_metadata").replace(/\/+user_metadata/,"/user_metadata")];return(null==e?void 0:e.roles)||null}async handleLoginCallback(){var t=this;return new Promise((e,i)=>{var s;null==(s=this.auth0)||s.parseHash(async function(i,s){i&&(t.dispatch("ERROR",{error:i,errorType:"authResult"}),e(!1));try{const i=await t.handleAuthResult(s);e(i)}catch(i){t.dispatch("ERROR",{error:i,errorType:"handleAuth"}),e(!1)}})})}async checkSession(){var t=this;return new Promise((e,i)=>{var s;null==(s=this.auth0)||s.checkSession({},async function(s,n){if(!s&&n&&n.accessToken&&n.idToken)try{const i=await t.fetchUser(n);e({user:i,authResult:n})}catch(t){i(t)}else i(s||new Error("Session invalid"))})})}async handleAuthResult(t){if(t&&t.accessToken&&t.idToken){const e=await this.fetchUser(t);return this.dispatch("AUTHENTICATED",{authResult:t,user:e}),!0}return!1}async fetchUser(t){return new Promise((e,i)=>{var s;null==(s=this.auth0)||s.client.userInfo((null==t?void 0:t.accessToken)||"",(t,s)=>{t?i(t):e(s)})})}}class i{constructor(t){this.dispatch=t.dispatch,import("netlify-identity-widget").then(({default:e})=>{this.netlifyIdentity=e,this.netlifyIdentity.init(t),this.netlifyIdentity.on("error",t=>{this.dispatch("ERROR",{error:t,errorType:"netlifyError"})}),this.netlifyIdentity.on("login",t=>{var e;this.dispatch("AUTHENTICATED",{user:t,authResult:{expiresIn:null==(e=t.token)?void 0:e.expires_in}})}),this.netlifyIdentity.on("init",t=>{var e;console.log("INIT",t),t&&(this.dispatch("LOGIN"),this.dispatch("AUTHENTICATED",{user:t,authResult:{expiresIn:null==(e=t.token)?void 0:e.expires_in}}))})})}static addDefaultParams(t={},e){return t}authorize(){this.dispatch("LOGIN"),this.netlifyIdentity.open("login")}signup(){this.dispatch("LOGIN"),this.netlifyIdentity.open("signup")}logout(t){this.netlifyIdentity.logout()}async handleLoginCallback(t){return console.warn("handleLoginCallback is unnecessary with Netlify Identity Widget"),!0}async checkSession(){try{await this.netlifyIdentity.refresh()}catch(t){throw new Error("Session invalid")}const t=this.netlifyIdentity.currentUser();var e;if(t)return{user:t,authResult:{expiresIn:null==(e=t.token)?void 0:e.expires_in}};throw new Error("Session invalid")}userId(t){return t.id}userRoles(t){return[t.role]||null}}export{e as Auth0,i as NetlifyIdentity};
//# sourceMappingURL=providers.modern.js.map
