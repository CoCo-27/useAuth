import t,{useCallback as e,useEffect as a}from"react";import{useService as n}from"@xstate/react";import{addSeconds as r,isAfter as o,differenceInSeconds as s}from"date-fns";import{Machine as i,assign as u,interpret as c}from"xstate";import{choose as l}from"xstate/lib/actions";import h from"auth0-js";function p(){return(p=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])}return t}).apply(this,arguments)}const d=c(i({id:"useAuth",initial:"unauthenticated",context:{user:{},expiresAt:null,authResult:null,isAuthenticating:!1,error:void 0,errorType:void 0,config:{navigate:()=>console.error("Please specify a navigation method that works with your router"),callbackDomain:"http://localhost:8000",customPropertyNamespace:"http://localhost:8000"}},states:{unauthenticated:{on:{LOGIN:"authenticating",CHECK_SESSION:"verifying",SET_CONFIG:{actions:["setConfig"]}}},authenticating:{on:{ERROR:"error",AUTHENTICATED:"authenticated",SET_CONFIG:{actions:["setConfig"]}},entry:["startAuthenticating"],exit:["stopAuthenticating"]},verifying:{invoke:{id:"checkSession",src:(t,e)=>t.config.authProvider.checkSession(),onDone:{target:"authenticated"},onError:{target:"error"}},entry:["startAuthenticating"],exit:["stopAuthenticating"]},authenticated:{on:{LOGOUT:"unauthenticated",SET_CONFIG:{actions:["setConfig"]},CHECK_SESSION:"verifying"},entry:["saveUserToContext","saveToLocalStorage"],exit:l([{cond:(t,e)=>"CHECK_SESSION"!==e.type,actions:["clearUserFromContext","clearLocalStorage"]}])},error:{entry:["saveErrorToContext","clearUserFromContext","clearLocalStorage"]}}},{actions:{startAuthenticating:u(t=>({isAuthenticating:!0})),stopAuthenticating:u(t=>({isAuthenticating:!1})),saveUserToContext:u((t,e)=>{const{authResult:a,user:n}=e.data?e.data:e;return{user:n,authResult:a,expiresAt:r(new Date,a.expiresIn)}}),clearUserFromContext:u(t=>({user:{},expiresAt:null,authResult:null})),saveToLocalStorage:(t,e)=>{const{expiresAt:a,user:n}=t;"undefined"!=typeof localStorage&&(localStorage.setItem("useAuth:expires_at",a?a.toISOString():"0"),localStorage.setItem("useAuth:user",JSON.stringify(n)))},clearLocalStorage:()=>{"undefined"!=typeof localStorage&&(localStorage.removeItem("useAuth:expires_at"),localStorage.removeItem("useAuth:user"))},saveErrorToContext:u((t,e)=>({errorType:e.errorType,error:e.error})),setConfig:u((t,e)=>({config:p({},t.config,e)}))}}));d.start(),function(t){if("undefined"!=typeof localStorage){const e=new Date(localStorage.getItem("useAuth:expires_at")||"0"),a=new Date;if(o(e,a)){const n=JSON.parse(localStorage.getItem("useAuth:user")||"{}");t("LOGIN"),t("AUTHENTICATED",{user:n,authResult:{expiresIn:s(e,a)}})}}}(d.send);const g=()=>{const[t,a]=n(d),{authProvider:r,navigate:s,callbackDomain:i,customPropertyNamespace:u}=t.context.config,c=e(async({postLoginRoute:t="/"}={})=>{r&&s&&i?"undefined"!=typeof window&&(a("LOGIN"),await r.handleLoginCallback()&&s(t)):console.warn("authProvider not configured yet")},[r,s,i]),l=()=>!(!t.context.expiresAt||!o(t.context.expiresAt,new Date));return{isAuthenticating:t.context.isAuthenticating,isAuthenticated:l,isAuthorized:e=>{const a=Array.isArray(e)?e:[e],n=t.context.user[(u+"/user_metadata").replace(/\/+user_metadata/,"/user_metadata")];return!(!l()||!n)&&a.some(t=>n.roles.includes(t))},user:t.context.user,userId:t.context.user?t.context.user.sub:null,authResult:t.context.authResult,login:()=>{null==r||r.authorize()},signup:()=>{null==r||r.authorize({mode:"signUp",screen_hint:"signup"})},logout:()=>{null==r||r.logout({returnTo:i}),a("LOGOUT"),s("/")},handleAuthentication:c,dispatch:a}};class m{constructor(t){this.auth0=new h.WebAuth(p({},t))}authorize(){var t;null==(t=this.auth0)||t.authorize()}signup(){var t;null==(t=this.auth0)||t.authorize({mode:"signUp",screen_hint:"signup"})}logout(t){var e;null==(e=this.auth0)||e.logout(t)}async handleLoginCallback(t){var e=this;const{dispatch:a}=t;return new Promise((t,n)=>{var r;null==(r=this.auth0)||r.parseHash(async function(n,r){n&&(a("ERROR",{error:n,errorType:"authResult"}),t(!1));try{const n=await e.handleAuthResult({authResult:r,dispatch:a});t(n)}catch(n){a("ERROR",{error:n,errorType:"handleAuth"}),t(!1)}})})}async checkSession(){var t=this;return new Promise((e,a)=>{var n;null==(n=this.auth0)||n.checkSession({},async function(n,r){if(!n&&r&&r.accessToken&&r.idToken)try{const a=await t.fetchUser({authResult:r});e({user:a,authResult:r})}catch(t){a(t)}else a(n||new Error("Session invalid"))})})}async handleAuthResult(t){const{dispatch:e,authResult:a}=t;return!!(a&&a.accessToken&&a.idToken)&&(e("AUTHENTICATED",{authResult:a,user:await this.fetchUser({authResult:a})}),!0)}async fetchUser(t){return new Promise((e,a)=>{var n,r;null==(n=this.auth0)||n.client.userInfo((null==(r=t.authResult)?void 0:r.accessToken)||"",(t,n)=>{t?a(t):e(n)})})}}const f=({children:e,navigate:n,auth0_audience_domain:r,auth0_domain:o,auth0_client_id:s,auth0_params:i={},customPropertyNamespace:u})=>{const c="undefined"!=typeof window?`${window.location.protocol}//${window.location.host}`:"http://localhost:8000",l={domain:o,clientID:s,redirectUri:c+"/auth0_callback",audience:`https://${r||o}/api/v2/`,responseType:"token id_token",scope:"openid profile email"},{dispatch:h}=g();return a(()=>{const t=new m(p({},l,i));h("SET_CONFIG",{authProvider:t,navigate:n,customPropertyNamespace:u,callbackDomain:c}),h("CHECK_SESSION")},[n,u,c]),t.createElement(t.Fragment,null,e)};export{f as AuthProvider,g as useAuth};
//# sourceMappingURL=index.modern.js.map
