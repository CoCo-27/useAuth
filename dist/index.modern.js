import t,{useCallback as e,useEffect as n}from"react";import{useService as a}from"@xstate/react";import{addSeconds as o,isAfter as r,differenceInSeconds as i}from"date-fns";import{Machine as s,assign as u,interpret as c}from"xstate";import{choose as l}from"xstate/lib/actions";import h from"auth0-js";import d from"netlify-identity-widget";function p(){return(p=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t}).apply(this,arguments)}const g=c(s({id:"useAuth",initial:"unauthenticated",context:{user:{},expiresAt:null,authResult:null,isAuthenticating:!1,error:void 0,errorType:void 0,config:{navigate:()=>console.error("Please specify a navigation method that works with your router"),callbackDomain:"http://localhost:8000",customPropertyNamespace:"http://localhost:8000"}},states:{unauthenticated:{on:{LOGIN:"authenticating",CHECK_SESSION:"verifying",SET_CONFIG:{actions:["setConfig"]}}},authenticating:{on:{ERROR:"error",AUTHENTICATED:"authenticated",SET_CONFIG:{actions:["setConfig"]}},entry:["startAuthenticating"],exit:["stopAuthenticating"]},verifying:{invoke:{id:"checkSession",src:(t,e)=>t.config.authProvider.checkSession(),onDone:{target:"authenticated"},onError:{target:"error"}},entry:["startAuthenticating"],exit:["stopAuthenticating"]},authenticated:{on:{LOGOUT:"unauthenticated",SET_CONFIG:{actions:["setConfig"]},CHECK_SESSION:"verifying"},entry:["saveUserToContext","saveToLocalStorage"],exit:l([{cond:(t,e)=>"CHECK_SESSION"!==e.type,actions:["clearUserFromContext","clearLocalStorage"]}])},error:{entry:["saveErrorToContext","clearUserFromContext","clearLocalStorage"]}}},{actions:{startAuthenticating:u(t=>({isAuthenticating:!0})),stopAuthenticating:u(t=>({isAuthenticating:!1})),saveUserToContext:u((t,e)=>{const{authResult:n,user:a}=e.data?e.data:e;return{user:a,authResult:n,expiresAt:o(new Date,n.expiresIn)}}),clearUserFromContext:u(t=>({user:{},expiresAt:null,authResult:null})),saveToLocalStorage:(t,e)=>{const{expiresAt:n,user:a}=t;"undefined"!=typeof localStorage&&(localStorage.setItem("useAuth:expires_at",n?n.toISOString():"0"),localStorage.setItem("useAuth:user",JSON.stringify(a)))},clearLocalStorage:()=>{"undefined"!=typeof localStorage&&(localStorage.removeItem("useAuth:expires_at"),localStorage.removeItem("useAuth:user"))},saveErrorToContext:u((t,e)=>({errorType:e.errorType,error:e.error})),setConfig:u((t,e)=>({config:p({},t.config,e)}))}}));g.start(),function(t){if("undefined"!=typeof localStorage){const e=new Date(localStorage.getItem("useAuth:expires_at")||"0"),n=new Date;if(r(e,n)){const a=JSON.parse(localStorage.getItem("useAuth:user")||"{}");t("LOGIN"),t("AUTHENTICATED",{user:a,authResult:{expiresIn:i(e,n)}})}}}(g.send);const y=()=>{const[t,n]=a(g),{authProvider:o,navigate:i,callbackDomain:s,customPropertyNamespace:u}=t.context.config,c=e(async({postLoginRoute:t="/"}={})=>{o&&i&&s?"undefined"!=typeof window&&(n("LOGIN"),await o.handleLoginCallback(n)&&i(t)):console.warn("authProvider not configured yet")},[o,i,s]),l=()=>!(!t.context.expiresAt||!r(t.context.expiresAt,new Date));return{isAuthenticating:t.context.isAuthenticating,isAuthenticated:l,isAuthorized:e=>{const n=Array.isArray(e)?e:[e],a=t.context.user[(u+"/user_metadata").replace(/\/+user_metadata/,"/user_metadata")];return!(!l()||!a)&&n.some(t=>a.roles.includes(t))},user:t.context.user,userId:t.context.user?t.context.user.sub:null,authResult:t.context.authResult,login:()=>{null==o||o.authorize()},signup:()=>{null==o||o.signup()},logout:()=>{null==o||o.logout(s),n("LOGOUT"),i("/")},handleAuthentication:c,dispatch:n}};class f{constructor(t){this.auth0=new h.WebAuth(p({},t))}authorize(){this.auth0.authorize()}signup(){this.auth0.authorize({mode:"signUp",screen_hint:"signup"})}logout(t){this.auth0.logout({returnTo:t})}async handleLoginCallback(t){var e=this;return new Promise((n,a)=>{this.auth0.parseHash(async function(a,o){a&&(t("ERROR",{error:a,errorType:"authResult"}),n(!1));try{const a=await e.handleAuthResult({authResult:o,dispatch:t});n(a)}catch(a){t("ERROR",{error:a,errorType:"handleAuth"}),n(!1)}})})}async checkSession(){var t=this;return new Promise((e,n)=>{this.auth0.checkSession({},async function(a,o){if(!a&&o&&o.accessToken&&o.idToken)try{const n=await t.fetchUser({authResult:o});e({user:n,authResult:o})}catch(t){n(t)}else n(a||new Error("Session invalid"))})})}async handleAuthResult(t){const{dispatch:e,authResult:n}=t;return!!(n&&n.accessToken&&n.idToken)&&(e("AUTHENTICATED",{authResult:n,user:await this.fetchUser({authResult:n})}),!0)}async fetchUser(t){return new Promise((e,n)=>{var a;this.auth0.client.userInfo((null==(a=t.authResult)?void 0:a.accessToken)||"",(t,a)=>{t?n(t):e(a)})})}}var m={__proto__:null,Auth0:f,NetlifyIdentity:class{constructor(t){this.netlifyIdentity=d,this.netlifyIdentity.init(t)}authorize(){this.netlifyIdentity.open("login")}signup(){this.netlifyIdentity.open("signup")}logout(t){this.netlifyIdentity.logout()}async handleLoginCallback(t){return!0}async checkSession(){return await this.netlifyIdentity.refresh(),{user:{},authResult:{}}}}};const A=({children:e,navigate:a,auth0_audience_domain:o,auth0_domain:r,auth0_client_id:i,auth0_params:s={},customPropertyNamespace:u})=>{const c="undefined"!=typeof window?`${window.location.protocol}//${window.location.host}`:"http://localhost:8000",l={domain:r,clientID:i,redirectUri:c+"/auth0_callback",audience:`https://${o||r}/api/v2/`,responseType:"token id_token",scope:"openid profile email"},{dispatch:h}=y();return n(()=>{const t=new f(p({},l,s));h("SET_CONFIG",{authProvider:t,navigate:a,customPropertyNamespace:u,callbackDomain:c}),h("CHECK_SESSION")},[a,u,c]),t.createElement(t.Fragment,null,e)};export{A as AuthProvider,m as Providers,y as useAuth};
//# sourceMappingURL=index.modern.js.map
