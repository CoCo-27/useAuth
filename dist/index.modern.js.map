{"version":3,"file":"index.modern.js","sources":["../src/authReducer.ts","../src/useAuth.ts","../src/providers/Auth0.ts","../src/providers/NetlifyIdentity.ts","../src/AuthProvider.tsx","../src/AuthConfig.tsx"],"sourcesContent":["import { addSeconds, differenceInSeconds, isAfter } from \"date-fns\";\nimport { Machine, assign, interpret } from \"xstate\";\nimport { choose } from \"xstate/lib/actions\";\nimport { AuthState } from \"./types\";\n\nexport const authMachine = Machine<AuthState>(\n    {\n        id: \"useAuth\",\n        initial: \"unauthenticated\",\n        context: {\n            user: {},\n            expiresAt: null,\n            authResult: null,\n            isAuthenticating: false,\n            error: undefined,\n            errorType: undefined,\n            config: {\n                navigate: () =>\n                    console.error(\n                        \"Please specify a navigation method that works with your router\"\n                    ),\n                // TODO: detect default\n                callbackDomain: \"http://localhost:8000\"\n            }\n        },\n        states: {\n            unauthenticated: {\n                on: {\n                    LOGIN: \"authenticating\",\n                    CHECK_SESSION: \"verifying\",\n                    SET_CONFIG: {\n                        actions: [\"setConfig\"]\n                    }\n                }\n            },\n            authenticating: {\n                on: {\n                    ERROR: \"error\",\n                    AUTHENTICATED: \"authenticated\",\n                    SET_CONFIG: {\n                        actions: [\"setConfig\"]\n                    }\n                },\n                entry: [\"startAuthenticating\"],\n                exit: [\"stopAuthenticating\"]\n            },\n            verifying: {\n                invoke: {\n                    id: \"checkSession\",\n                    src: (context, event) =>\n                        context.config.authProvider!.checkSession(),\n                    onDone: {\n                        target: \"authenticated\"\n                    },\n                    onError: {\n                        target: \"error\"\n                    }\n                },\n                entry: [\"startAuthenticating\"],\n                exit: [\"stopAuthenticating\"]\n            },\n            authenticated: {\n                on: {\n                    LOGOUT: \"unauthenticated\",\n                    SET_CONFIG: {\n                        actions: [\"setConfig\"]\n                    },\n                    CHECK_SESSION: \"verifying\"\n                },\n                entry: [\"saveUserToContext\", \"saveToLocalStorage\"],\n                exit: choose([\n                    {\n                        cond: (context, event) =>\n                            event.type !== \"CHECK_SESSION\",\n                        actions: [\"clearUserFromContext\", \"clearLocalStorage\"]\n                    }\n                ])\n            },\n            error: {\n                entry: [\n                    \"saveErrorToContext\",\n                    \"clearUserFromContext\",\n                    \"clearLocalStorage\"\n                ]\n            }\n        }\n    },\n    {\n        actions: {\n            startAuthenticating: assign(context => {\n                return {\n                    isAuthenticating: true\n                };\n            }),\n            stopAuthenticating: assign(context => {\n                return {\n                    isAuthenticating: false\n                };\n            }),\n            saveUserToContext: assign((context, event) => {\n                const { authResult, user } = event.data ? event.data : event;\n                const expiresAt = addSeconds(new Date(), authResult.expiresIn);\n\n                return {\n                    user,\n                    authResult,\n                    expiresAt\n                };\n            }),\n            clearUserFromContext: assign(context => {\n                return {\n                    user: {},\n                    expiresAt: null,\n                    authResult: null\n                };\n            }),\n            saveToLocalStorage: (context, event) => {\n                const { expiresAt, user } = context;\n\n                if (typeof localStorage !== \"undefined\") {\n                    localStorage.setItem(\n                        \"useAuth:expires_at\",\n                        expiresAt ? expiresAt.toISOString() : \"0\"\n                    );\n                    localStorage.setItem(\"useAuth:user\", JSON.stringify(user));\n                }\n            },\n            clearLocalStorage: () => {\n                if (typeof localStorage !== \"undefined\") {\n                    localStorage.removeItem(\"useAuth:expires_at\");\n                    localStorage.removeItem(\"useAuth:user\");\n                }\n            },\n            saveErrorToContext: assign((context, event) => {\n                return {\n                    errorType: event.errorType,\n                    error: event.error\n                };\n            }),\n            setConfig: assign((context, event) => {\n                return {\n                    config: {\n                        ...context.config,\n                        ...event\n                    }\n                };\n            })\n        }\n    }\n);\n\n// check localstorage and login as soon as this file loads\nfunction hydrateFromLocalStorage(send: any) {\n    if (typeof localStorage !== \"undefined\") {\n        const expiresAt = new Date(\n                localStorage.getItem(\"useAuth:expires_at\") || \"0\"\n            ),\n            now = new Date();\n\n        if (isAfter(expiresAt, now)) {\n            const user = JSON.parse(\n                localStorage.getItem(\"useAuth:user\") || \"{}\"\n            );\n            send(\"LOGIN\");\n            send(\"AUTHENTICATED\", {\n                user,\n                authResult: {\n                    expiresIn: differenceInSeconds(expiresAt, now)\n                }\n            });\n        }\n    }\n}\n\nexport const authService = interpret(authMachine);\nauthService.start();\n\nhydrateFromLocalStorage(authService.send);\n","import { useCallback } from \"react\";\n\nimport { useAuthInterface } from \"./types\";\nimport { useService } from \"@xstate/react\";\nimport { authService } from \"./authReducer\";\nimport { isAfter } from \"date-fns\";\n\n/**\n * The main API for useAuth\n *\n * @return {boolean} isAuthenticated is current user authenticated\n * @return {boolean} isAuthenticating currently running authentication\n * @return {function} isAuthorized check if current user is authenticated and matches list of roles\n * @return {object} user current user\n * @return {string} userId current user's identifier\n * @return {object} authResult raw authentication result object from auth provider\n * @return {function} login start the login process\n * @return {function} signup same as login, passes { mode: \"signUp\", screen_hint: \"signup\" } to Auth0\n * @return {function} logout start the logout process\n * @return {function} handleAuthentication function to call on your callback page\n */\nexport const useAuth: useAuthInterface = () => {\n    const [state, dispatch] = useService(authService);\n\n    const { authProvider, navigate, callbackDomain } = state.context.config;\n\n    const login = () => {\n        authProvider?.authorize();\n    };\n\n    const signup = () => {\n        authProvider?.signup();\n    };\n\n    const logout = (postLogoutRoute?: string) => {\n        // React sends a click event by default, we don't care\n        if (typeof postLogoutRoute === \"string\") {\n            authProvider?.logout(`${callbackDomain}${postLogoutRoute}`);\n        } else {\n            authProvider?.logout();\n        }\n\n        dispatch(\"LOGOUT\");\n\n        // Return to the homepage after logout.\n        navigate(typeof postLogoutRoute === \"string\" ? postLogoutRoute : \"/\");\n    };\n\n    const handleAuthentication = useCallback(\n        async ({ postLoginRoute = \"/\" } = {}) => {\n            if (!authProvider || !navigate) {\n                console.warn(\"authProvider not configured yet\");\n                return;\n            }\n\n            if (typeof window !== \"undefined\") {\n                dispatch(\"LOGIN\");\n\n                const loggedIn = await authProvider.handleLoginCallback(\n                    dispatch\n                );\n\n                if (loggedIn) {\n                    debugger;\n                    navigate(postLoginRoute);\n                }\n            }\n        },\n        [authProvider, navigate]\n    );\n\n    const isAuthenticated = () => {\n        return !!(\n            state.context.expiresAt &&\n            isAfter(state.context.expiresAt, new Date())\n        );\n    };\n\n    const isAuthorized = (roles: string | string[]) => {\n        const _roles = Array.isArray(roles) ? roles : [roles];\n        const userRoles = authProvider?.userRoles(state.context.user);\n\n        if (!isAuthenticated() || !userRoles) {\n            return false;\n        } else {\n            return _roles.some(role => userRoles.includes(role));\n        }\n    };\n\n    return {\n        isAuthenticating: state.context.isAuthenticating,\n        isAuthenticated,\n        isAuthorized,\n        user: state.context.user,\n        userId: authProvider?.userId(state.context.user),\n        authResult: state.context.authResult,\n        login,\n        signup,\n        logout,\n        handleAuthentication,\n        dispatch\n    };\n};\n","import Auth0Client, {\n    Auth0DecodedHash,\n    Auth0Error,\n    Auth0ParseHashError,\n    Auth0UserProfile,\n    AuthOptions as Auth0Options\n} from \"auth0-js\";\nimport {\n    AuthOptions,\n    AuthProviderClass,\n    AuthUser,\n    ProviderOptions\n} from \"../types\";\n\n// Wrapper that provides a common interface for different providers\n// Modeled after Auth0 because that was first :)\nexport class Auth0 implements AuthProviderClass {\n    private auth0: Auth0Client.WebAuth;\n    private dispatch: (eventName: string, eventData?: any) => void;\n    private customPropertyNamespace?: string;\n\n    public checkSessionOnLoad = true;\n\n    constructor(params: AuthOptions) {\n        this.dispatch = params.dispatch;\n        this.customPropertyNamespace = params.customPropertyNamespace;\n        this.auth0 = new Auth0Client.WebAuth({\n            ...(params as Auth0Options)\n        });\n    }\n\n    // Makes configuration easier by guessing default options\n    static addDefaultParams(params: ProviderOptions, callbackDomain: string) {\n        const vals = params as Auth0Options;\n\n        return {\n            redirectUri: `${callbackDomain}/auth0_callback`,\n            audience: `https://${vals.domain}/api/v2/`,\n            responseType: \"token id_token\",\n            scope: \"openid profile email\",\n            ...vals\n        };\n    }\n\n    // Opens login dialog\n    public authorize() {\n        this.auth0.authorize();\n    }\n\n    // Opens signup dialog\n    public signup() {\n        this.auth0.authorize({\n            mode: \"signUp\",\n            screen_hint: \"signup\"\n        });\n    }\n\n    // Logs user out on the underlying service\n    public logout(returnTo?: string) {\n        this.auth0.logout({ returnTo });\n    }\n\n    // Returns the userId from Auth0 shape of data\n    public userId(user: Auth0UserProfile): string {\n        return user.sub;\n    }\n\n    // Returns user roles from Auth0 shape of data\n    public userRoles(user: AuthUser): string[] | null {\n        const metadata =\n            user[\n                // make this friendlier to use if you leave a trailing slash in config\n                `${this.customPropertyNamespace}/user_metadata`.replace(\n                    /\\/+user_metadata/,\n                    \"/user_metadata\"\n                )\n            ];\n\n        return metadata?.roles || null;\n    }\n\n    // Handles login after redirect back from service\n    public async handleLoginCallback(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            this.auth0.parseHash(\n                async (\n                    err: Auth0ParseHashError | null,\n                    authResult: Auth0DecodedHash | null\n                ) => {\n                    if (err) {\n                        this.dispatch(\"ERROR\", {\n                            error: err,\n                            errorType: \"authResult\"\n                        });\n                        resolve(false);\n                    }\n\n                    try {\n                        const loggedIn = await this.handleAuthResult(\n                            authResult\n                        );\n\n                        resolve(loggedIn);\n                    } catch (err) {\n                        this.dispatch(\"ERROR\", {\n                            error: err,\n                            errorType: \"handleAuth\"\n                        });\n                        resolve(false);\n                    }\n                }\n            );\n        });\n    }\n\n    // verifies session is still valid\n    // returns fresh user info\n    public async checkSession(): Promise<{\n        user: Auth0UserProfile;\n        authResult: Auth0DecodedHash;\n    }> {\n        return new Promise((resolve, reject) => {\n            this.auth0.checkSession(\n                {},\n                async (err: any, authResult: Auth0DecodedHash) => {\n                    if (\n                        !err &&\n                        authResult &&\n                        authResult.accessToken &&\n                        authResult.idToken\n                    ) {\n                        // fetch user data\n                        try {\n                            const user = await this.fetchUser(authResult);\n\n                            resolve({\n                                user,\n                                authResult\n                            });\n                        } catch (e) {\n                            reject(e);\n                        }\n                    } else {\n                        reject(err || new Error(\"Session invalid\"));\n                    }\n                }\n            );\n        });\n    }\n\n    // Parses auth result and dispatches the AUTHENTICATED event\n    private async handleAuthResult(authResult: Auth0DecodedHash | null) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n            const user = await this.fetchUser(authResult);\n\n            this.dispatch(\"AUTHENTICATED\", {\n                authResult,\n                user\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Fetches current user info\n    private async fetchUser(\n        authResult: Auth0DecodedHash | null\n    ): Promise<Auth0UserProfile> {\n        return new Promise((resolve, reject) => {\n            this.auth0.client.userInfo(\n                authResult?.accessToken || \"\",\n                (err: Auth0Error | null, user: Auth0UserProfile) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(user);\n                    }\n                }\n            );\n        });\n    }\n}\n","import {\n    AuthOptions,\n    AuthProviderClass,\n    AuthUser,\n    ProviderOptions\n} from \"../types\";\nimport NetlifyIdentityWidget, { User } from \"netlify-identity-widget\";\n\n// Wrapper for NetlifyIdentity conforming to auth provider interface\nexport class NetlifyIdentity implements AuthProviderClass {\n    private netlifyIdentity: any;\n    private dispatch: (eventName: string, eventData?: any) => void;\n\n    public checkSessionOnLoad = false;\n\n    constructor(params: AuthOptions) {\n        this.netlifyIdentity = NetlifyIdentityWidget;\n\n        this.netlifyIdentity.init(params as NetlifyIdentityWidget.InitOptions);\n        this.dispatch = params.dispatch;\n\n        this.netlifyIdentity.on(\"error\", (error: Error) => {\n            this.dispatch(\"ERROR\", {\n                error,\n                errorType: \"netlifyError\"\n            });\n        });\n        this.netlifyIdentity.on(\"login\", (user: User) => {\n            this.dispatch(\"AUTHENTICATED\", {\n                user,\n                authResult: {\n                    expiresIn: user.token?.expires_in\n                }\n            });\n        });\n        this.netlifyIdentity.on(\"init\", (user: User) => {\n            if (user) {\n                this.dispatch(\"LOGIN\");\n                this.dispatch(\"AUTHENTICATED\", {\n                    user,\n                    authResult: {\n                        expiresIn: user.token?.expires_in\n                    }\n                });\n            }\n        });\n    }\n\n    static addDefaultParams(\n        params: ProviderOptions = {},\n        callbackDomain: string\n    ) {\n        const vals = params as NetlifyIdentityWidget.InitOptions;\n        return vals;\n    }\n\n    // Opens login dialog\n    public authorize() {\n        this.dispatch(\"LOGIN\");\n        this.netlifyIdentity.open(\"login\");\n    }\n\n    // Opens signup dialog\n    public signup() {\n        this.dispatch(\"LOGIN\");\n        this.netlifyIdentity.open(\"signup\");\n    }\n\n    // Logs user out on the underlying service\n    public logout(returnTo?: string) {\n        this.netlifyIdentity.logout();\n    }\n\n    // Handles login after redirect back from service\n    public async handleLoginCallback(dispatch: any): Promise<boolean> {\n        console.warn(\n            \"handleLoginCallback is unnecessary with Netlify Identity Widget\"\n        );\n        return true;\n    }\n\n    // verifies session is still valid\n    // returns fresh user info\n    public async checkSession(): Promise<{\n        user: any;\n        authResult: any;\n    }> {\n        console.warn(\n            \"checkSession is unnecessary with Netlify Identity Widget\"\n        );\n        return {\n            user: {},\n            authResult: {}\n        };\n    }\n\n    // Returns the userId from NetlifyIdentity shape of data\n    public userId(user: NetlifyIdentityWidget.User): string {\n        return user.id;\n    }\n\n    // Returns user roles from NetlifyIdentity shape of data\n    public userRoles(user: NetlifyIdentityWidget.User): string[] | null {\n        return [user.role] || null;\n    }\n}\n","import React, { useEffect } from \"react\";\nimport { AuthOptions as Auth0Options } from \"auth0-js\";\n\nimport { AuthProviderInterface } from \"./types\";\nimport { useAuth } from \"./useAuth\";\nimport { Auth0 } from \"./providers\";\n\nexport const AuthProvider: AuthProviderInterface = ({\n    children,\n    navigate,\n    auth0_audience_domain,\n    auth0_domain,\n    auth0_client_id,\n    auth0_params = {},\n    customPropertyNamespace\n}) => {\n    const callbackDomain =\n        typeof window !== \"undefined\"\n            ? `${window.location.protocol}//${window.location.host}`\n            : \"http://localhost:8000\";\n\n    const audienceDomain = auth0_audience_domain || auth0_domain;\n\n    const params: Auth0Options = {\n        domain: auth0_domain,\n        clientID: auth0_client_id,\n        redirectUri: `${callbackDomain}/auth0_callback`,\n        audience: `https://${audienceDomain}/api/v2/`,\n        responseType: \"token id_token\",\n        scope: \"openid profile email\"\n    };\n\n    const { dispatch } = useAuth();\n\n    // Instantiate Auth0 client\n\n    useEffect(() => {\n        const auth0 = new Auth0({\n            dispatch,\n            customPropertyNamespace,\n            ...params,\n            ...auth0_params\n        });\n\n        dispatch(\"SET_CONFIG\", {\n            authProvider: auth0,\n            navigate\n        });\n\n        dispatch(\"CHECK_SESSION\");\n    }, [navigate, customPropertyNamespace]);\n\n    useEffect(() => {\n        console.warn(\n            \"Using the AuthProvider root component is deprecated. Migrate to AuthConfig or manual dispatching. Takes  5min.\"\n        );\n    }, []);\n\n    return <React.Fragment>{children}</React.Fragment>;\n};\n","import * as React from \"react\";\nimport { AuthConfigInterface, ProviderOptions } from \"./types\";\nimport { useAuth } from \"./useAuth\";\n\nexport const AuthConfig: AuthConfigInterface = ({\n    authProvider,\n    params,\n    navigate,\n    children\n}) => {\n    const { dispatch } = useAuth();\n\n    const callbackDomain =\n        typeof window !== \"undefined\"\n            ? `${window.location.protocol}//${window.location.host}`\n            : \"http://localhost:8000\";\n\n    React.useEffect(() => {\n        // instantiate auth provider on page load\n        const authInstance = new authProvider({\n            dispatch,\n            ...authProvider.addDefaultParams(\n                params as ProviderOptions,\n                callbackDomain\n            )\n        });\n\n        // set config in XState\n        dispatch(\"SET_CONFIG\", {\n            authProvider: authInstance,\n            navigate,\n            callbackDomain\n        });\n\n        if (authInstance.checkSessionOnLoad) {\n            dispatch(\"CHECK_SESSION\");\n        }\n    }, [dispatch, authProvider, params, navigate]);\n\n    return <>{children}</>;\n};\n"],"names":["authService","interpret","Machine","id","initial","context","user","expiresAt","authResult","isAuthenticating","error","undefined","errorType","config","navigate","console","callbackDomain","states","unauthenticated","on","LOGIN","CHECK_SESSION","SET_CONFIG","actions","authenticating","ERROR","AUTHENTICATED","entry","exit","verifying","invoke","src","event","authProvider","checkSession","onDone","target","onError","authenticated","LOGOUT","choose","cond","type","startAuthenticating","assign","stopAuthenticating","saveUserToContext","data","addSeconds","Date","expiresIn","clearUserFromContext","saveToLocalStorage","localStorage","setItem","toISOString","JSON","stringify","clearLocalStorage","removeItem","saveErrorToContext","setConfig","start","send","getItem","now","isAfter","parse","differenceInSeconds","hydrateFromLocalStorage","useAuth","state","dispatch","useService","handleAuthentication","useCallback","async","postLoginRoute","window","handleLoginCallback","warn","isAuthenticated","isAuthorized","roles","_roles","Array","isArray","userRoles","some","role","includes","userId","login","authorize","signup","logout","postLogoutRoute","Auth0","constructor","params","this","customPropertyNamespace","auth0","Auth0Client","WebAuth","[object Object]","redirectUri","audience","domain","responseType","scope","mode","screen_hint","returnTo","sub","metadata","replace","Promise","resolve","reject","parseHash","err","_this","loggedIn","handleAuthResult","accessToken","idToken","_this2","fetchUser","e","Error","client","userInfo","netlifyIdentity","NetlifyIdentityWidget","init","token","_user$token","expires_in","_user$token2","open","AuthProvider","children","auth0_audience_domain","auth0_domain","auth0_client_id","auth0_params","clientID","location","protocol","host","useEffect","React","Fragment","AuthConfig","authInstance","addDefaultParams","checkSessionOnLoad"],"mappings":"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"}