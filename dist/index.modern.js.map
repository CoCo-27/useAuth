{"version":3,"file":"index.modern.js","sources":["../src/authReducer.ts","../src/useAuth.ts","../src/AuthProvider.tsx"],"sourcesContent":["import { addSeconds, differenceInSeconds, isAfter } from \"date-fns\";\nimport { Machine, assign, interpret } from \"xstate\";\nimport { choose } from \"xstate/lib/actions\";\nimport { AuthState } from \"./types\";\nimport { checkSession } from \"./useAuth\";\n\nexport const authMachine = Machine<AuthState>(\n    {\n        id: \"useAuth\",\n        initial: \"unauthenticated\",\n        context: {\n            user: {},\n            expiresAt: null,\n            authResult: null,\n            isAuthenticating: false,\n            error: undefined,\n            errorType: undefined,\n            config: {\n                navigate: () =>\n                    console.error(\n                        \"Please specify a navigation method that works with your router\"\n                    ),\n                callbackDomain: \"http://localhost:8000\",\n                customPropertyNamespace: \"http://localhost:8000\"\n            }\n        },\n        states: {\n            unauthenticated: {\n                on: {\n                    LOGIN: \"authenticating\",\n                    CHECK_SESSION: \"verifying\",\n                    SET_CONFIG: {\n                        actions: [\"setConfig\"]\n                    }\n                }\n            },\n            authenticating: {\n                on: {\n                    ERROR: \"error\",\n                    AUTHENTICATED: \"authenticated\",\n                    SET_CONFIG: {\n                        actions: [\"setConfig\"]\n                    }\n                },\n                entry: [\"startAuthenticating\"],\n                exit: [\"stopAuthenticating\"]\n            },\n            verifying: {\n                invoke: {\n                    id: \"checkSession\",\n                    src: (context, event) =>\n                        checkSession({\n                            authProvider: context.config.authProvider\n                        }),\n                    onDone: {\n                        target: \"authenticated\"\n                    },\n                    onError: {\n                        target: \"error\"\n                    }\n                },\n                entry: [\"startAuthenticating\"],\n                exit: [\"stopAuthenticating\"]\n            },\n            authenticated: {\n                on: {\n                    LOGOUT: \"unauthenticated\",\n                    SET_CONFIG: {\n                        actions: [\"setConfig\"]\n                    },\n                    CHECK_SESSION: \"verifying\"\n                },\n                entry: [\"saveUserToContext\", \"saveToLocalStorage\"],\n                exit: choose([\n                    {\n                        cond: (context, event) =>\n                            event.type !== \"CHECK_SESSION\",\n                        actions: [\"clearUserFromContext\", \"clearLocalStorage\"]\n                    }\n                ])\n            },\n            error: {\n                entry: [\n                    \"saveErrorToContext\",\n                    \"clearUserFromContext\",\n                    \"clearLocalStorage\"\n                ]\n            }\n        }\n    },\n    {\n        actions: {\n            startAuthenticating: assign(context => {\n                return {\n                    isAuthenticating: true\n                };\n            }),\n            stopAuthenticating: assign(context => {\n                return {\n                    isAuthenticating: false\n                };\n            }),\n            saveUserToContext: assign((context, event) => {\n                const { authResult, user } = event.data ? event.data : event;\n                const expiresAt = addSeconds(new Date(), authResult.expiresIn);\n\n                return {\n                    user,\n                    authResult,\n                    expiresAt\n                };\n            }),\n            clearUserFromContext: assign(context => {\n                return {\n                    user: {},\n                    expiresAt: null,\n                    authResult: null\n                };\n            }),\n            saveToLocalStorage: (context, event) => {\n                const { expiresAt, user } = context;\n\n                if (typeof localStorage !== \"undefined\") {\n                    localStorage.setItem(\n                        \"useAuth:expires_at\",\n                        expiresAt ? expiresAt.toISOString() : \"0\"\n                    );\n                    localStorage.setItem(\"useAuth:user\", JSON.stringify(user));\n                }\n            },\n            clearLocalStorage: () => {\n                if (typeof localStorage !== \"undefined\") {\n                    localStorage.removeItem(\"useAuth:expires_at\");\n                    localStorage.removeItem(\"useAuth:user\");\n                }\n            },\n            saveErrorToContext: assign((context, event) => {\n                return {\n                    errorType: event.errorType,\n                    error: event.error\n                };\n            }),\n            setConfig: assign((context, event) => {\n                return {\n                    config: {\n                        ...context.config,\n                        ...event\n                    }\n                };\n            })\n        }\n    }\n);\n\n// check localstorage and login as soon as this file loads\nfunction hydrateFromLocalStorage(send: any) {\n    if (typeof localStorage !== \"undefined\") {\n        const expiresAt = new Date(\n                localStorage.getItem(\"useAuth:expires_at\") || \"0\"\n            ),\n            now = new Date();\n\n        if (isAfter(expiresAt, now)) {\n            const user = JSON.parse(\n                localStorage.getItem(\"useAuth:user\") || \"{}\"\n            );\n            send(\"LOGIN\");\n            send(\"AUTHENTICATED\", {\n                user,\n                authResult: {\n                    expiresIn: differenceInSeconds(expiresAt, now)\n                }\n            });\n        }\n    }\n}\n\nexport const authService = interpret(authMachine);\nauthService.start();\n\nhydrateFromLocalStorage(authService.send);\n","import { useCallback } from \"react\";\n\nimport {\n    useAuthInterface,\n    handleAuthResultInterface,\n    fetchUserInterface\n} from \"./types\";\nimport {\n    Auth0DecodedHash,\n    Auth0UserProfile,\n    Auth0Error,\n    Auth0ParseHashError,\n    WebAuth\n} from \"auth0-js\";\nimport { useService } from \"@xstate/react\";\nimport { authService } from \"./authReducer\";\nimport { isAfter } from \"date-fns\";\n\nconst fetchUser: fetchUserInterface = async ({ authProvider, authResult }) => {\n    return new Promise((resolve, reject) => {\n        authProvider.client.userInfo(\n            authResult.accessToken || \"\",\n            (err: Auth0Error | null, user: Auth0UserProfile) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(user);\n                }\n            }\n        );\n    });\n};\n\nexport const handleAuthResult: handleAuthResultInterface = async ({\n    err,\n    dispatch,\n    authProvider,\n    authResult\n}) => {\n    if (authResult && authResult.accessToken && authResult.idToken) {\n        try {\n            const user = await fetchUser({\n                authProvider,\n                authResult\n            });\n\n            dispatch(\"AUTHENTICATED\", {\n                authResult,\n                user\n            });\n\n            return true;\n        } catch (e) {\n            dispatch(\"ERROR\", {\n                error: e,\n                errorType: \"fetchUser\"\n            });\n            return false;\n        }\n    } else if (err) {\n        console.error(err);\n        dispatch(\"ERROR\", {\n            error: err,\n            errorType: \"authResult\"\n        });\n\n        return false;\n    } else {\n        return false;\n    }\n};\n\n// verifies session is still valid\n// returns fresh user info\n// TODO: types are leaking auth provider\nexport async function checkSession({\n    authProvider\n}: {\n    authProvider: WebAuth;\n}): Promise<{ user: Auth0UserProfile; authResult: Auth0DecodedHash }> {\n    return new Promise((resolve, reject) => {\n        authProvider.checkSession(\n            {},\n            async (err: any, authResult: Auth0DecodedHash) => {\n                if (\n                    !err &&\n                    authResult &&\n                    authResult.accessToken &&\n                    authResult.idToken\n                ) {\n                    // fetch user data\n                    try {\n                        const user = await fetchUser({\n                            authProvider,\n                            authResult\n                        });\n\n                        resolve({ user, authResult });\n                    } catch (e) {\n                        reject(e);\n                    }\n                } else {\n                    reject(err || new Error(\"Session invalid\"));\n                }\n            }\n        );\n    });\n}\n\n/**\n * The main API for useAuth\n *\n * @return {boolean} isAuthenticated is current user authenticated\n * @return {boolean} isAuthenticating currently running authentication\n * @return {function} isAuthorized check if current user is authenticated and matches list of roles\n * @return {object} user current user\n * @return {string} userId current user's identifier\n * @return {object} authResult raw authentication result object from auth provider\n * @return {function} login start the login process\n * @return {function} signup same as login, passes { mode: \"signUp\", screen_hint: \"signup\" } to Auth0\n * @return {function} logout start the logout process\n * @return {function} handleAuthentication function to call on your callback page\n */\nexport const useAuth: useAuthInterface = () => {\n    const [state, dispatch] = useService(authService);\n\n    const {\n        authProvider,\n        navigate,\n        callbackDomain,\n        customPropertyNamespace\n    } = state.context.config;\n\n    const login = () => {\n        authProvider && authProvider.authorize();\n    };\n\n    const signup = () => {\n        authProvider &&\n            authProvider.authorize({ mode: \"signUp\", screen_hint: \"signup\" });\n    };\n\n    const logout = () => {\n        authProvider &&\n            authProvider.logout({\n                returnTo: callbackDomain\n            });\n        dispatch(\"LOGOUT\");\n\n        // Return to the homepage after logout.\n        navigate(\"/\");\n    };\n\n    const handleAuthentication = useCallback(\n        ({ postLoginRoute = \"/\" } = {}) => {\n            if (!authProvider || !navigate || !callbackDomain) {\n                console.warn(\"authProvider not configured yet\");\n                return;\n            }\n\n            if (typeof window !== \"undefined\") {\n                dispatch(\"LOGIN\");\n\n                authProvider.parseHash(\n                    async (\n                        err: Auth0ParseHashError | null,\n                        authResult: Auth0DecodedHash | null\n                    ) => {\n                        await handleAuthResult({\n                            err,\n                            authResult,\n                            dispatch,\n                            authProvider\n                        });\n\n                        navigate(postLoginRoute);\n                    }\n                );\n            }\n        },\n        [authProvider, navigate, callbackDomain]\n    );\n\n    const isAuthenticated = () => {\n        return !!(\n            state.context.expiresAt &&\n            isAfter(state.context.expiresAt, new Date())\n        );\n    };\n\n    const isAuthorized = (roles: string | string[]) => {\n        const _roles = Array.isArray(roles) ? roles : [roles];\n        const metadata =\n            state.context.user[\n                // make this friendlier to use if you leave a trailing slash in config\n                `${customPropertyNamespace}/user_metadata`.replace(\n                    /\\/+user_metadata/,\n                    \"/user_metadata\"\n                )\n            ];\n\n        if (!isAuthenticated() || !metadata) {\n            return false;\n        } else {\n            return _roles.some(role => metadata.roles.includes(role));\n        }\n    };\n\n    return {\n        isAuthenticating: state.context.isAuthenticating,\n        isAuthenticated,\n        isAuthorized,\n        user: state.context.user,\n        userId: state.context.user ? state.context.user.sub : null,\n        authResult: state.context.authResult,\n        login,\n        signup,\n        logout,\n        handleAuthentication,\n        dispatch\n    };\n};\n","import React, { useEffect } from \"react\";\nimport Auth0 from \"auth0-js\";\nimport { AuthOptions } from \"auth0-js\";\n\nimport { AuthProviderInterface } from \"./types\";\nimport { handleAuthResult, useAuth } from \"./useAuth\";\n\nexport const AuthProvider: AuthProviderInterface = ({\n    children,\n    navigate,\n    auth0_audience_domain,\n    auth0_domain,\n    auth0_client_id,\n    auth0_params = {},\n    customPropertyNamespace\n}) => {\n    const callbackDomain =\n        typeof window !== \"undefined\"\n            ? `${window.location.protocol}//${window.location.host}`\n            : \"http://localhost:8000\";\n\n    const audienceDomain = auth0_audience_domain || auth0_domain;\n\n    const params: AuthOptions = {\n        domain: auth0_domain,\n        clientID: auth0_client_id,\n        redirectUri: `${callbackDomain}/auth0_callback`,\n        audience: `https://${audienceDomain}/api/v2/`,\n        responseType: \"token id_token\",\n        scope: \"openid profile email\"\n    };\n\n    const { dispatch } = useAuth();\n\n    // Instantiate Auth0 client\n\n    useEffect(() => {\n        const auth0 = new Auth0.WebAuth({ ...params, ...auth0_params });\n\n        dispatch(\"SET_CONFIG\", {\n            authProvider: auth0,\n            navigate,\n            customPropertyNamespace,\n            callbackDomain\n        });\n\n        dispatch(\"CHECK_SESSION\");\n    }, [navigate, customPropertyNamespace, callbackDomain]);\n\n    return <React.Fragment>{children}</React.Fragment>;\n};\n"],"names":["authService","interpret","Machine","id","initial","context","user","expiresAt","authResult","isAuthenticating","error","undefined","errorType","config","navigate","console","callbackDomain","customPropertyNamespace","states","unauthenticated","on","LOGIN","CHECK_SESSION","SET_CONFIG","actions","authenticating","ERROR","AUTHENTICATED","entry","exit","verifying","invoke","src","event","async","authProvider","Promise","resolve","reject","checkSession","err","accessToken","idToken","fetchUser","e","Error","onDone","target","onError","authenticated","LOGOUT","choose","cond","type","startAuthenticating","assign","stopAuthenticating","saveUserToContext","data","addSeconds","Date","expiresIn","clearUserFromContext","saveToLocalStorage","localStorage","setItem","toISOString","JSON","stringify","clearLocalStorage","removeItem","saveErrorToContext","setConfig","start","send","getItem","now","isAfter","parse","differenceInSeconds","hydrateFromLocalStorage","client","userInfo","useAuth","state","dispatch","useService","handleAuthentication","useCallback","postLoginRoute","window","parseHash","handleAuthResult","warn","isAuthenticated","isAuthorized","roles","_roles","Array","isArray","metadata","replace","some","role","includes","userId","sub","login","authorize","signup","mode","screen_hint","logout","returnTo","AuthProvider","children","auth0_audience_domain","auth0_domain","auth0_client_id","auth0_params","location","protocol","host","params","domain","clientID","redirectUri","audience","responseType","scope","useEffect","auth0","Auth0","WebAuth","React","Fragment"],"mappings":"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"}