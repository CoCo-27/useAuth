import t,{useCallback as e,useEffect as r,createElement as a,Fragment as n}from"react";import{useService as o}from"@xstate/react";import{addSeconds as s,isAfter as i,differenceInSeconds as u}from"date-fns";import{Machine as c,assign as l,interpret as h}from"xstate";import{choose as d}from"xstate/lib/actions";import{NetlifyIdentity as p}from"./providers/NetlifyIdentity.ts";function g(){return(g=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a])}return t}).apply(this,arguments)}const f=h(c({id:"useAuth",initial:"unauthenticated",context:{user:{},expiresAt:null,authResult:null,isAuthenticating:!1,error:void 0,errorType:void 0,config:{navigate:()=>console.error("Please specify a navigation method that works with your router"),callbackDomain:"http://localhost:8000"}},states:{unauthenticated:{on:{LOGIN:"authenticating",CHECK_SESSION:"verifying",SET_CONFIG:{actions:["setConfig"]}}},authenticating:{on:{ERROR:"error",AUTHENTICATED:"authenticated",SET_CONFIG:{actions:["setConfig"]}},entry:["startAuthenticating"],exit:["stopAuthenticating"]},verifying:{invoke:{id:"checkSession",src:(t,e)=>t.config.authProvider.checkSession(),onDone:{target:"authenticated"},onError:{target:"unauthenticated",actions:["clearUserFromContext","clearLocalStorage"]}},entry:["startAuthenticating"],exit:["stopAuthenticating"]},authenticated:{on:{LOGOUT:"unauthenticated",SET_CONFIG:{actions:["setConfig"]},CHECK_SESSION:"verifying"},entry:["saveUserToContext","saveToLocalStorage"],exit:d([{cond:(t,e)=>"CHECK_SESSION"!==e.type,actions:["clearUserFromContext","clearLocalStorage"]}])},error:{entry:["saveErrorToContext","clearUserFromContext","clearLocalStorage"]}}},{actions:{startAuthenticating:l(t=>({isAuthenticating:!0})),stopAuthenticating:l(t=>({isAuthenticating:!1})),saveUserToContext:l((t,e)=>{const{authResult:r,user:a}=e.data?e.data:e;return{user:a,authResult:r,expiresAt:s(new Date,r.expiresIn)}}),clearUserFromContext:l(t=>({user:{},expiresAt:null,authResult:null})),saveToLocalStorage:(t,e)=>{const{expiresAt:r,user:a}=t;"undefined"!=typeof localStorage&&(localStorage.setItem("useAuth:expires_at",r?r.toISOString():"0"),localStorage.setItem("useAuth:user",JSON.stringify(a)))},clearLocalStorage:()=>{"undefined"!=typeof localStorage&&(localStorage.removeItem("useAuth:expires_at"),localStorage.removeItem("useAuth:user"))},saveErrorToContext:l((t,e)=>({errorType:e.errorType,error:e.error})),setConfig:l((t,e)=>({config:g({},t.config,e)}))}}));f.start(),function(t){if("undefined"!=typeof localStorage){const e=new Date(localStorage.getItem("useAuth:expires_at")||"0"),r=new Date;if(i(e,r)){const a=JSON.parse(localStorage.getItem("useAuth:user")||"{}");t("LOGIN"),t("AUTHENTICATED",{user:a,authResult:{expiresIn:u(e,r)}})}}}(f.send);const m=()=>{const[t,r]=o(f),{authProvider:a,navigate:n,callbackDomain:s}=t.context.config,u=e(async({postLoginRoute:t="/"}={})=>{a&&n?"undefined"!=typeof window&&(r("LOGIN"),await a.handleLoginCallback(r)&&n(t)):console.warn("authProvider not configured yet")},[a,n]),c=()=>!(!t.context.expiresAt||!i(t.context.expiresAt,new Date));return{isAuthenticating:t.context.isAuthenticating,isAuthenticated:c,isAuthorized:e=>{const r=Array.isArray(e)?e:[e],n=null==a?void 0:a.userRoles(t.context.user);return!(!c()||!n)&&r.some(t=>n.includes(t))},user:t.context.user,userId:null==a?void 0:a.userId(t.context.user),authResult:t.context.authResult,login:()=>{null==a||a.authorize()},signup:()=>{null==a||a.signup()},logout:t=>{"string"==typeof t?null==a||a.logout(`${s}${t}`):null==a||a.logout(),r("LOGOUT"),n("string"==typeof t?t:"/")},handleAuthentication:u,dispatch:r}},y=({children:e,auth0_params:a={}})=>(m(),r(()=>{console.warn("Using the AuthProvider root component is deprecated. Migrate to AuthConfig or manual dispatching. Takes  5min.")},[]),t.createElement(t.Fragment,null,e)),v=({authProvider:t,params:e,navigate:o,children:s})=>{const{dispatch:i}=m(),u="undefined"!=typeof window?`${window.location.protocol}//${window.location.host}`:"http://localhost:8000";return r(()=>{const r=new t(g({dispatch:i},t.addDefaultParams(e,u)));i("SET_CONFIG",{authProvider:r,navigate:o,callbackDomain:u}),i("CHECK_SESSION")},[i,t,e,o]),a(n,null,s)};var A={__proto__:null,Auth0:class{constructor(t){this.dispatch=t.dispatch,this.customPropertyNamespace=t.customPropertyNamespace,import("auth0-js").then(({WebAuth:e})=>{this.auth0=new e(g({},t))})}static addDefaultParams(t,e){return g({redirectUri:e+"/auth0_callback",audience:`https://${t.domain}/api/v2/`,responseType:"token id_token",scope:"openid profile email"},t)}authorize(){var t;null==(t=this.auth0)||t.authorize()}signup(){var t;null==(t=this.auth0)||t.authorize({mode:"signUp",screen_hint:"signup"})}logout(t){var e;null==(e=this.auth0)||e.logout({returnTo:t})}userId(t){return t.sub}userRoles(t){const e=t[(this.customPropertyNamespace+"/user_metadata").replace(/\/+user_metadata/,"/user_metadata")];return(null==e?void 0:e.roles)||null}async handleLoginCallback(){var t=this;return new Promise((e,r)=>{var a;null==(a=this.auth0)||a.parseHash(async function(r,a){r&&(t.dispatch("ERROR",{error:r,errorType:"authResult"}),e(!1));try{const r=await t.handleAuthResult(a);e(r)}catch(r){t.dispatch("ERROR",{error:r,errorType:"handleAuth"}),e(!1)}})})}async checkSession(){var t=this;return new Promise((e,r)=>{var a;null==(a=this.auth0)||a.checkSession({},async function(a,n){if(!a&&n&&n.accessToken&&n.idToken)try{const r=await t.fetchUser(n);e({user:r,authResult:n})}catch(t){r(t)}else r(a||new Error("Session invalid"))})})}async handleAuthResult(t){if(t&&t.accessToken&&t.idToken){const e=await this.fetchUser(t);return this.dispatch("AUTHENTICATED",{authResult:t,user:e}),!0}return!1}async fetchUser(t){return new Promise((e,r)=>{var a;null==(a=this.auth0)||a.client.userInfo((null==t?void 0:t.accessToken)||"",(t,a)=>{t?r(t):e(a)})})}},NetlifyIdentity:p};export{v as AuthConfig,y as AuthProvider,A as Providers,m as useAuth};
//# sourceMappingURL=react-use-auth.modern.js.map
