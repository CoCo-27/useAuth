{"version":3,"file":"providers.modern.js","sources":["../src/providers/Auth0.ts","../src/providers/NetlifyIdentity.ts"],"sourcesContent":["import {\n    Auth0DecodedHash,\n    Auth0Error,\n    Auth0ParseHashError,\n    Auth0UserProfile,\n    AuthOptions as Auth0Options,\n    WebAuth\n} from \"auth0-js\";\nimport {\n    AuthOptions,\n    AuthProviderClass,\n    AuthUser,\n    ProviderOptions\n} from \"../types\";\n\n// Wrapper that provides a common interface for different providers\n// Modeled after Auth0 because that was first :)\nexport class Auth0 implements AuthProviderClass {\n    private auth0?: WebAuth;\n    private dispatch: (eventName: string, eventData?: any) => void;\n    private customPropertyNamespace?: string;\n\n    constructor(params: AuthOptions) {\n        this.dispatch = params.dispatch;\n        this.customPropertyNamespace = params.customPropertyNamespace;\n\n        import(\"auth0-js\").then(({ WebAuth }) => {\n            // @ts-ignore I think TS is wrong here :P\n            this.auth0 = new WebAuth({\n                ...(params as Auth0Options)\n            });\n        });\n    }\n\n    // Makes configuration easier by guessing default options\n    static addDefaultParams(params: ProviderOptions, callbackDomain: string) {\n        const vals = params as Auth0Options;\n\n        return {\n            redirectUri: `${callbackDomain}/auth0_callback`,\n            audience: `https://${vals.domain}/api/v2/`,\n            responseType: \"token id_token\",\n            scope: \"openid profile email\",\n            ...vals\n        };\n    }\n\n    // Opens login dialog\n    public authorize() {\n        this.auth0?.authorize();\n    }\n\n    // Opens signup dialog\n    public signup() {\n        this.auth0?.authorize({\n            mode: \"signUp\",\n            screen_hint: \"signup\"\n        });\n    }\n\n    // Logs user out on the underlying service\n    public logout(returnTo?: string) {\n        this.auth0?.logout({ returnTo });\n    }\n\n    // Returns the userId from Auth0 shape of data\n    public userId(user: Auth0UserProfile): string {\n        return user.sub;\n    }\n\n    // Returns user roles from Auth0 shape of data\n    public userRoles(user: AuthUser): string[] | null {\n        const metadata =\n            user[\n                // make this friendlier to use if you leave a trailing slash in config\n                `${this.customPropertyNamespace}/user_metadata`.replace(\n                    /\\/+user_metadata/,\n                    \"/user_metadata\"\n                )\n            ];\n\n        return metadata?.roles || null;\n    }\n\n    // Handles login after redirect back from service\n    public async handleLoginCallback(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            this.auth0?.parseHash(\n                async (\n                    err: Auth0ParseHashError | null,\n                    authResult: Auth0DecodedHash | null\n                ) => {\n                    if (err) {\n                        this.dispatch(\"ERROR\", {\n                            error: err,\n                            errorType: \"authResult\"\n                        });\n                        resolve(false);\n                    }\n\n                    try {\n                        const loggedIn = await this.handleAuthResult(\n                            authResult\n                        );\n\n                        resolve(loggedIn);\n                    } catch (err) {\n                        this.dispatch(\"ERROR\", {\n                            error: err,\n                            errorType: \"handleAuth\"\n                        });\n                        resolve(false);\n                    }\n                }\n            );\n        });\n    }\n\n    // verifies session is still valid\n    // returns fresh user info\n    public async checkSession(): Promise<{\n        user: Auth0UserProfile;\n        authResult: Auth0DecodedHash;\n    }> {\n        return new Promise((resolve, reject) => {\n            this.auth0?.checkSession(\n                {},\n                async (err: any, authResult: Auth0DecodedHash) => {\n                    if (\n                        !err &&\n                        authResult &&\n                        authResult.accessToken &&\n                        authResult.idToken\n                    ) {\n                        // fetch user data\n                        try {\n                            const user = await this.fetchUser(authResult);\n\n                            resolve({\n                                user,\n                                authResult\n                            });\n                        } catch (e) {\n                            reject(e);\n                        }\n                    } else {\n                        reject(err || new Error(\"Session invalid\"));\n                    }\n                }\n            );\n        });\n    }\n\n    // Parses auth result and dispatches the AUTHENTICATED event\n    private async handleAuthResult(authResult: Auth0DecodedHash | null) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n            const user = await this.fetchUser(authResult);\n\n            this.dispatch(\"AUTHENTICATED\", {\n                authResult,\n                user\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Fetches current user info\n    private async fetchUser(\n        authResult: Auth0DecodedHash | null\n    ): Promise<Auth0UserProfile> {\n        return new Promise((resolve, reject) => {\n            this.auth0?.client.userInfo(\n                authResult?.accessToken || \"\",\n                (err: Auth0Error | null, user: Auth0UserProfile) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(user);\n                    }\n                }\n            );\n        });\n    }\n}\n","import { AuthOptions, AuthProviderClass, ProviderOptions } from \"../types\";\nimport { User, InitOptions } from \"netlify-identity-widget\";\n\n// Wrapper for NetlifyIdentity conforming to auth provider interface\nexport class NetlifyIdentity implements AuthProviderClass {\n    private netlifyIdentity?: any;\n    private dispatch: (eventName: string, eventData?: any) => void;\n\n    constructor(params: AuthOptions) {\n        this.dispatch = params.dispatch;\n\n        import(\"netlify-identity-widget\").then(({ default: widget }) => {\n            this.netlifyIdentity = widget;\n\n            this.netlifyIdentity.init(params as InitOptions);\n\n            this.netlifyIdentity.on(\"error\", (error: Error) => {\n                this.dispatch(\"ERROR\", {\n                    error,\n                    errorType: \"netlifyError\"\n                });\n            });\n            this.netlifyIdentity.on(\"login\", (user: User) => {\n                this.dispatch(\"AUTHENTICATED\", {\n                    user,\n                    authResult: {\n                        expiresIn: user.token?.expires_in\n                    }\n                });\n            });\n            this.netlifyIdentity.on(\"init\", (user: User) => {\n                console.log(\"INIT\", user);\n                if (user) {\n                    this.dispatch(\"LOGIN\");\n                    this.dispatch(\"AUTHENTICATED\", {\n                        user,\n                        authResult: {\n                            expiresIn: user.token?.expires_in\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    static addDefaultParams(\n        params: ProviderOptions = {},\n        callbackDomain: string\n    ) {\n        const vals = params as InitOptions;\n        return vals;\n    }\n\n    // Opens login dialog\n    public authorize() {\n        this.dispatch(\"LOGIN\");\n        this.netlifyIdentity.open(\"login\");\n    }\n\n    // Opens signup dialog\n    public signup() {\n        this.dispatch(\"LOGIN\");\n        this.netlifyIdentity.open(\"signup\");\n    }\n\n    // Logs user out on the underlying service\n    public logout(returnTo?: string) {\n        this.netlifyIdentity.logout();\n    }\n\n    // Handles login after redirect back from service\n    public async handleLoginCallback(dispatch: any): Promise<boolean> {\n        console.warn(\n            \"handleLoginCallback is unnecessary with Netlify Identity Widget\"\n        );\n        return true;\n    }\n\n    // verifies session is still valid\n    // returns fresh user info\n    public async checkSession(): Promise<{\n        user: any;\n        authResult: any;\n    }> {\n        try {\n            await this.netlifyIdentity.refresh();\n        } catch (e) {\n            throw new Error(\"Session invalid\");\n        }\n\n        const user = this.netlifyIdentity.currentUser();\n\n        if (user) {\n            return {\n                user,\n                authResult: {\n                    expiresIn: user.token?.expires_in\n                }\n            };\n        } else {\n            throw new Error(\"Session invalid\");\n        }\n    }\n\n    // Returns the userId from NetlifyIdentity shape of data\n    public userId(user: User): string {\n        return user.id;\n    }\n\n    // Returns user roles from NetlifyIdentity shape of data\n    public userRoles(user: User): string[] | null {\n        return [user.role] || null;\n    }\n}\n"],"names":["Auth0","constructor","params","this","dispatch","customPropertyNamespace","import","then","WebAuth","auth0","[object Object]","callbackDomain","redirectUri","audience","domain","responseType","scope","authorize","signup","mode","screen_hint","logout","returnTo","userId","user","sub","userRoles","metadata","replace","roles","Promise","resolve","reject","parseHash","async","err","authResult","_this","error","errorType","loggedIn","handleAuthResult","checkSession","accessToken","idToken","_this2","fetchUser","e","Error","client","userInfo","NetlifyIdentity","default","widget","netlifyIdentity","init","on","expiresIn","token","_user$token","expires_in","console","log","_user$token2","open","warn","refresh","currentUser","_user$token3","id","role"],"mappings":"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"}